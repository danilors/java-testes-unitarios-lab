
# ===================================================================
# H2 Database Configuration
# ===================================================================

# H2 Datasource URL
# jdbc:h2:mem:testdb -> Connect to an in-memory database named 'testdb'
# DB_CLOSE_DELAY=-1 -> Keep the database open as long as the JVM is running
# (useful for accessing the H2 console even if the last connection closes)
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1

# H2 Driver Class Name
spring.datasource.driver-class-name=org.h2.Driver

# H2 Database Credentials (default for H2)
spring.datasource.username=sa
spring.datasource.password=

# ===================================================================
# JPA / Hibernate Configuration
# ===================================================================

# Hibernate DDL (Data Definition Language) generation strategy
# create-drop: Drop the schema when the SessionFactory is closed (application shutdown),
#              and create it again on startup. Data is lost between application runs.
#              Suitable for development and testing.
spring.jpa.hibernate.ddl-auto=create-drop

# Show SQL statements generated by Hibernate in the console logs
# Useful for debugging and understanding what Hibernate is doing.
spring.jpa.show-sql=true

# Format the SQL statements shown in the logs for better readability (optional)
spring.jpa.properties.hibernate.format_sql=true

# Specify the H2 dialect for Hibernate (optional, Spring Boot usually auto-detects)
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# ===================================================================
# H2 Console Configuration (Optional, but recommended for development)
# ===================================================================

# Enable the H2 web console
spring.h2.console.enabled=true

# Set the path for accessing the H2 console in your browser
# Default is /h2-console, so you'd access it at http://localhost:8080/h2-console (adjust port if needed)
spring.h2.console.path=/h2-console

# Optional: Disable CSRF protection specifically for the H2 console if you encounter issues
# spring.security.csrf.ignoring-request-matchers=antMatcher("/h2-console/**") # If using Spring Security 6+
# spring.security.csrf.ignoringAntMatchers=/h2-console/** # Older Spring Security versions
# spring.security.headers.frameOptions.sameOrigin=true # Allow console in iframe

# ===================================================================
# JPA / Hibernate Configuration
# ===================================================================

# ... (other JPA properties like ddl-auto, show-sql) ...

# Defer DataSource initialization (running data.sql) until after JPA setup (Hibernate DDL)
# This ensures tables exist before data.sql tries to insert into them.
#spring.jpa.defer-datasource-initialization=true
#spring.sql.init.data-locations=classpath:init.sql